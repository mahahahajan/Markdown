{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","gfm","breaks","startTxt","App","props","state","markdown","this","updateMarkdown","script","document","createElement","async","src","body","appendChild","setState","className","id","value","onChange","e","target","console","log","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMAGIA,G,KAASC,EAAQ,KACrBD,EAAOE,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAEV,IAAMC,EAAQ,8dAgCOC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUJ,GAHK,E,gEAQjBK,KAAKC,eAAeN,GACpB,IAAMO,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAQ,EACfH,EAAOI,IAAM,kEACbH,SAASI,KAAKC,YAAYN,K,qCAKbH,GACbC,KAAKS,SAAS,CAAEV,e,+BAGR,IAAD,OAoBP,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,2CACb,4BACG,IADH,wBASJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACZ,IAED,wBAAIA,UAAU,uBAAd,YAIA,yBAAKA,UAAU,cACb,8BAAUC,GAAG,SACXD,UAAU,gBACVE,MAAOZ,KAAKF,MAAMC,SAClBc,SAAU,SAACC,GACT,EAAKb,eAAea,EAAEC,OAAOH,SAI9BI,QAAQC,IAAIjB,KAAKF,MAAMC,aAK9B,yBAAKW,UAAU,YACZ,IAED,wBAAIA,UAAU,mCAAd,aAIA,yBAAKC,GAAG,UAAUD,UAAU,uBAC1BQ,wBAAyB,CACvBC,OAAQ7B,EAAOU,KAAKF,MAAMC,qB,GAvFXqB,IAAMC,WC5BnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.6d24e0a2.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nimport './App.css'\nlet marked = require(\"marked\");\nmarked.setOptions({\n  gfm: true,\n  breaks: true,\n});\nconst startTxt = `\n# Welcome to Markdown Previewer\n## Just type here to get started or check out these examples \nYou can also make text **bold**...\nThere's also [links](https://www.freecodecamp.com), and\n  \\`\\`\\` \n  public static void main (string[] args)\n  \\`\\`\\`\n\n  \\` npm install react \\`\n\ncodeblocks\n\n- But wait there's more\n- There's lists\n\n> Blockquotes\n\n![React Logo w/ Text](https://opengameart.org/sites/default/files/heart%20pixel%20art%20254x254.png)  and there's images\n`;\n// const startTxt2 = \"  \\n\" \n// + \" \\n\"\n// + \"  \\n\\n\"\n// + \" \\`\\`\\` \\n\" \n// + \" npm install react \\n\"\n// + \"\\`\\`\\` \\n\"\n// + \" - But wait there's more \\n\"\n// + \" - And of course there are lists.\\n \\n\"\n// + \"> Blockquotes \\n\"\n// + \" \\n \\n\" \n// + \" \";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: startTxt,\n    };\n  }\n  \n  componentDidMount() {\n    this.updateMarkdown(startTxt);\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    document.body.appendChild(script);\n    \n  }\n\n\n  updateMarkdown(markdown) {\n    this.setState({ markdown });\n  }\n\n  render() {\n    var inputStyle = {\n      width: \"100%\",\n      height: \"50vmin\",\n      border: \"none\",\n      resize: \"none\",\n      // marginLeft: \"auto\",\n      // marginRight: \"auto\",\n      backgroundColor: \"#282D33\",\n      padding: \"10px\",\n    };\n    var outputStyle = {\n      width: \"35vmax\",\n      height: \"50vmin\",\n\n      // marginLeft: \"auto\",\n      // marginRight: \"auto\",\n      padding: \"10px\",\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <div className=\"row mt-4\">\n            <div className=\"col title text-center text-align-center\">\n              <h1>\n                {\" \"}\n\n                  Markdown Previewer\n\n              </h1>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-6 input\">\n              {\" \"}\n\n              <h4 className=\"input file filename\">\n                Input.md\n                </h4>\n\n              <div className=\"input file\" >\n                <textarea id=\"editor\"\n                  className=\"input txtarea\"\n                  value={this.state.markdown}\n                  onChange={(e) => {\n                    this.updateMarkdown(e.target.value);\n                  }}\n                >\n                  \n                  {console.log(this.state.markdown)}\n                </textarea>\n              </div>\n            </div>\n\n            <div className=\"col-md-6\">\n              {\" \"}\n\n              <h4 className=\"output file filename downSpacer\">\n                output.md\n                </h4>\n\n              <div id=\"preview\" className=\"output txtarea file \"\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.markdown),\n                }} >\n\n              </div>\n            </div>\n\n\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}